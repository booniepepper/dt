### Flags and such ###

[ [ action flag ]:
  args [ flag eq? ] any?
  action swap do?
] \dt/handle-flag def

[ "dt " p version pl ] \dt/print-version def

[ dt/print-version
  [ "USAGE: dt FLAGS CODE..."
    "dt is \"duct tape\" for your unix pipes."
    ""
    "dt can be used in pipes to transform data with general purpose programming"
    "operations. It can also excel in short shebang scripts, or be explored as an"
    "interactive REPL (read-eval-print loop)."
    ""
    "The default behavior of dt when standard input comes from a pipe is to read all"
    "lines as a quote of strings. If you need to do something more manual, use stream"
    "as the first argument."
    ""

    ""
    "More info at https://dt.plumbing"
  ] pls
] \dt/print-help def

[ [ dt/print-help 0 exit ]   "--help" dt/handle-flag
  [ dt/print-version 0 exit ]   "--version" dt/handle-flag
] \dt/handle-flags def

[ args unwords words
  dup len 0 neq?   \has-args:
  # Drop the first arg if it's 'stream'
  [ deq swap   \first-arg:
    first-arg "stream" neq?   \keep:
    [ first-arg swap enq ] keep do?
  ] has-args do?
] \dt/args def

[ dt/handle-flags   dt/args unwords eval ] \dt/run-args def!


### PIPE things ###

[ readlns   dt/run-args ] \dt/pipe-thru-args def!


### REPL things ###

[ red "dt " ep version epl   norm inspire epl ] \dt/repl-greet def

# Definitions only used in the dt REPL
[ \quit \.q def
  \quit \exit def
  # TODO: define a help command
] \dt/repl-prelude def

[ dt/handle-flags   dt/repl-greet   dt/repl-prelude   repl ] \dt/main-repl def!
